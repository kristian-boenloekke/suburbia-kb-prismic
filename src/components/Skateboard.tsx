/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useMemo, useRef } from 'react'
import { useGLTF, useTexture } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type SkateboardProps = {
    // wheelTextureURLs: string[];
    // wheelTextureURL: string;
    // deckTextureURLs: string[];
    // deckTextureURL: string;
    // truckColor: string;
    // boltColor: string;
    // constantWheelSpin?: boolean;
    // pose?: "upright" | "side";
  }

type GLTFResult = GLTF & {
    nodes: {
        GripTape: THREE.Mesh
        Wheel1: THREE.Mesh
        Wheel2: THREE.Mesh
        Deck: THREE.Mesh
        Wheel4: THREE.Mesh
        Bolts: THREE.Mesh
        Wheel3: THREE.Mesh
        Baseplates: THREE.Mesh
        Truck1: THREE.Mesh
        Truck2: THREE.Mesh
    }
    materials: {}
}

//the nodes comes primarilly from the bin file, - the gltf file points to the bin file.
//bemærk preload gltf i bunden, - og hook useGLTF
// mange three features skal kaldes inde i et canvas, f.eks. useTexture, - interactiveSkateboard.tsx provides that canvas

export function Skateboard(props: SkateboardProps) {
    const { nodes, materials } = useGLTF('/skateboard.gltf') as GLTFResult

    const gripTapeDiffuse = useTexture("/skateboard/griptape-diffuse.webp")
    const gripTapeRoughness = useTexture("/skateboard/griptape-roughness.webp")

    const gripTapeMaterial = useMemo(() => {
        const material = new THREE.MeshStandardMaterial({
            map: gripTapeDiffuse,
            bumpMap: gripTapeRoughness, // ift når mesh rammes af lys
            roughnessMap: gripTapeRoughness, // how shiny is it
            bumpScale: 3.5,
            roughness: 0.5,
            color: "#555555"
        })

        // se hvad der sker uden if gripTapeDiffuse - zoom ind

        if (gripTapeDiffuse) {
            gripTapeDiffuse.wrapS = THREE.RepeatWrapping
            gripTapeDiffuse.wrapT = THREE.RepeatWrapping
            gripTapeDiffuse.repeat.set(9, 9)
            gripTapeDiffuse.needsUpdate = true

            gripTapeRoughness.wrapS = THREE.RepeatWrapping
            gripTapeRoughness.wrapT = THREE.RepeatWrapping
            gripTapeRoughness.repeat.set(9, 9)
            gripTapeRoughness.needsUpdate = true

            // nu er teksturen meget smooth når man ser boardet fra siden - add anisotropy
            
            gripTapeRoughness.anisotropy = 8
        }

        return material
    }, [gripTapeDiffuse, gripTapeRoughness])

    const boltColor = '#555555'
    const boltMaterial = useMemo(
        () => new THREE.MeshStandardMaterial({
            color: boltColor,
            metalness: 5,
            roughness: 3

        }), [boltColor]
    )


    return (
        <group {...props} dispose={null}>
            <group name="Scene">
                <mesh
                    name="GripTape"
                    castShadow
                    receiveShadow
                    geometry={nodes.GripTape.geometry}
                    material={gripTapeMaterial}
                    position={[0, 0.286, -0.002]}
                />
                <mesh
                    name="Wheel1"
                    castShadow
                    receiveShadow
                    geometry={nodes.Wheel1.geometry}
                    material={nodes.Wheel1.material}
                    position={[0.238, 0.086, 0.635]}
                />
                <mesh
                    name="Wheel2"
                    castShadow
                    receiveShadow
                    geometry={nodes.Wheel2.geometry}
                    material={nodes.Wheel2.material}
                    position={[-0.237, 0.086, 0.635]}
                />
                <mesh
                    name="Deck"
                    castShadow
                    receiveShadow
                    geometry={nodes.Deck.geometry}
                    material={nodes.Deck.material}
                    position={[0, 0.271, -0.002]}
                />
                <mesh
                    name="Wheel4"
                    castShadow
                    receiveShadow
                    geometry={nodes.Wheel4.geometry}
                    material={nodes.Wheel4.material}
                    position={[-0.238, 0.086, -0.635]}
                    rotation={[Math.PI, 0, Math.PI]}
                />
                <mesh
                    name="Bolts"
                    castShadow
                    receiveShadow
                    geometry={nodes.Bolts.geometry}
                    material={boltMaterial}
                    position={[0, 0.198, 0]}
                    rotation={[Math.PI, 0, Math.PI]}
                />
                <mesh
                    name="Wheel3"
                    castShadow
                    receiveShadow
                    geometry={nodes.Wheel3.geometry}
                    material={nodes.Wheel3.material}
                    position={[0.237, 0.086, -0.635]}
                    rotation={[Math.PI, 0, Math.PI]}
                />
                <mesh
                    name="Baseplates"
                    castShadow
                    receiveShadow
                    geometry={nodes.Baseplates.geometry}
                    material={nodes.Baseplates.material}
                    position={[0, 0.211, 0]}
                />
                <mesh
                    name="Truck1"
                    castShadow
                    receiveShadow
                    geometry={nodes.Truck1.geometry}
                    material={nodes.Truck1.material}
                    position={[0, 0.101, -0.617]}
                />
                <mesh
                    name="Truck2"
                    castShadow
                    receiveShadow
                    geometry={nodes.Truck2.geometry}
                    material={nodes.Truck2.material}
                    position={[0, 0.101, 0.617]}
                    rotation={[Math.PI, 0, Math.PI]}
                />
            </group>
        </group>
    )
}

useGLTF.preload('/skateboard.gltf')
